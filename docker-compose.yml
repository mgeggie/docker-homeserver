---
version: "3.7"
networks:
  # docker network create --gateway 192.168.99.1 --subnet 192.168.99.0/24 traefik_proxy
  traefik_proxy:
    external:
      name: traefik_proxy
  default:
    driver: bridge
  socket_proxy:
    external:
      name: socket_proxy
services:
  traefik:
    image: traefik:v2.3.2
    container_name: traefik
    restart: unless-stopped
    command:
      - "--log.level=DEBUG"
      # - "--api.insecure=true"
      # Allow these IPs to set the X-Forwarded-* headers - "Cloudflare IPs: https://www.cloudflare.com/ips/
      - "--entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22"
      - "--accessLog=true"
      - "--accessLog.filePath=/access.log"
      # - "--certificatesResolvers.cloudflare.acme.storage=/acme.json" # Comment out to force use of wildcard certificate
      - "--certificatesResolvers.cloudflare.acme.dnsChallenge.provider=cloudflare"
      # - "--certificatesResolvers.cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory" # LetsEncrypt Staging Server - uncomment when testing
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--entrypoints.traefik.address=:8080"
      - "--api=true"
      - "--api.dashboard=true"
      - "--providers.file.directory=/config"
      - "--providers.file.watch=true"
      - "--providers.docker=true"
      - '--providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)'
      - "--providers.docker.network=traefik_proxy"
      - "--providers.docker.swarmMode=false"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedbydefault=false"
    env_file: .env
    networks:
      traefik_proxy:
        ipv4_address: 192.168.99.254
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    labels:
      - "traefik.enable=true"
      # HTTPS redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      # Different things
      - "traefik.http.routers.traefik-router.entrypoints=https"
      - "traefik.http.routers.traefik-router.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-router.tls=true"
      - "traefik.http.routers.traefik-router.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-router.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-router.tls.domains[1].sans=*.$DOMAINNAME"
      ## Services - API
      - "traefik.http.routers.traefik-router.service=api@internal"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      ## Middlewares
      - "traefik.http.routers.traefik-router.middlewares=basic-auth@file,rate-limit@file"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/config:/config
      - ./traefik/acme/acme.json:/acme.json
      - ./traefik/access.log:/access.log
      - ./traefik/.htpasswd:/.htpasswd
  transmission:
    image: haugene/transmission-openvpn
    container_name: transmission
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    networks:
      traefik_proxy:
        ipv4_address: 192.168.99.90
    ports:
      - 9091:9091
    env_file: .env
    environment:
      - CREATE_TUN_DEVICE=true
      - LOCAL_NETWORK=192.168.0.0/16
      - TRANSMISSION_HOME=/data
      - PUID=1000
      - PGID=1000
    volumes:
      - ./transmission/config:/config
      - ./transmission/data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transmission.entrypoints=https"
      - "traefik.http.routers.transmission.tls=true"
      - "traefik.http.routers.transmission.middlewares=rate-limit@file,basic-auth@file"
      - "traefik.http.routers.transmission.rule=Host(`transmission.$DOMAINNAME`)"
      - "traefik.http.services.transmission.loadbalancer.server.port=9091"
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    networks:
      traefik_proxy:
        ipv4_address: 192.168.99.89
    ports:
      - 8990:8989
    env_file: .env
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./sonarr:/config
      - ./downloads/tv:/tv
      - ./transmission/data/watch:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.entrypoints=https"
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.middlewares=rate-limit@file,basic-auth@file"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.$DOMAINNAME`)"
  whoami:
    image: traefik/whoami
    restart: unless-stopped
    networks:
      traefik_proxy:
        ipv4_address: 192.168.99.99
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.entrypoints=https"
      - "traefik.http.routers.whoami.tls=true"
      - "traefik.http.routers.whoami.middlewares=rate-limit@file,basic-auth@file"
      - "traefik.http.routers.whoami.rule=Host(`whoami.$DOMAINNAME`)"

